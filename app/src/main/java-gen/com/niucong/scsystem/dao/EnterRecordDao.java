package com.niucong.scsystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.niucong.scsystem.dao.EnterRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EnterRecord.
*/
public class EnterRecordDao extends AbstractDao<EnterRecord, Long> {

    public static final String TABLENAME = "EnterRecord";

    /**
     * Properties of entity EnterRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BarCode = new Property(1, long.class, "BarCode", false, "BAR_CODE");
        public final static Property Number = new Property(2, Integer.class, "Number", false, "NUMBER");
        public final static Property Price = new Property(3, Integer.class, "Price", false, "PRICE");
        public final static Property EnterDate = new Property(4, java.util.Date.class, "EnterDate", false, "ENTER_DATE");
    };


    public EnterRecordDao(DaoConfig config) {
        super(config);
    }
    
    public EnterRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EnterRecord' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BAR_CODE' INTEGER NOT NULL ," + // 1: BarCode
                "'NUMBER' INTEGER," + // 2: Number
                "'PRICE' INTEGER," + // 3: Price
                "'ENTER_DATE' INTEGER NOT NULL );"); // 4: EnterDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EnterRecord'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EnterRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBarCode());
 
        Integer Number = entity.getNumber();
        if (Number != null) {
            stmt.bindLong(3, Number);
        }
 
        Integer Price = entity.getPrice();
        if (Price != null) {
            stmt.bindLong(4, Price);
        }
        stmt.bindLong(5, entity.getEnterDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EnterRecord readEntity(Cursor cursor, int offset) {
        EnterRecord entity = new EnterRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // BarCode
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Number
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Price
            new java.util.Date(cursor.getLong(offset + 4)) // EnterDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EnterRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarCode(cursor.getLong(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setEnterDate(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EnterRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EnterRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
