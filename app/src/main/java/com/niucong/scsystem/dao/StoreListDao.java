package com.niucong.scsystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table StoreList.
 */
public class StoreListDao extends AbstractDao<StoreList, Long> {

    public static final String TABLENAME = "StoreList";

    /**
     * Properties of entity StoreList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BarCode = new Property(0, long.class, "BarCode", true, "BAR_CODE");
        public final static Property Number = new Property(1, Integer.class, "Number", false, "NUMBER");
        public final static Property Price = new Property(2, Integer.class, "Price", false, "PRICE");
        public final static Property WarnNumber = new Property(3, Integer.class, "WarnNumber", false, "WARN_NUMBER");
        public final static Property UpdateTime = new Property(4, long.class, "UpdateTime", false, "UPDATE_TIME");
    }

    ;


    public StoreListDao(DaoConfig config) {
        super(config);
    }

    public StoreListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'StoreList' (" + //
                "'BAR_CODE' INTEGER PRIMARY KEY NOT NULL ," + // 0: BarCode
                "'NUMBER' INTEGER," + // 1: Number
                "'PRICE' INTEGER," + // 2: Price
                "'WARN_NUMBER' INTEGER, " + // 3: WarnNumber
                " 'UPDATE_TIME' INTEGER NOT NULL);"); // 5:UpdateTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'StoreList'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoreList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBarCode());

        Integer Number = entity.getNumber();
        if (Number != null) {
            stmt.bindLong(2, Number);
        }

        Integer Price = entity.getPrice();
        if (Price != null) {
            stmt.bindLong(3, Price);
        }

        Integer WarnNumber = entity.getWarnNumber();
        if (WarnNumber != null) {
            stmt.bindLong(4, WarnNumber);
        }
        stmt.bindLong(5, entity.getUpdateTime());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public StoreList readEntity(Cursor cursor, int offset) {
        StoreList entity = new StoreList( //
                cursor.getLong(offset + 0), // BarCode
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // Number
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Price
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // WarnNumber
                cursor.getLong(offset + 4) // UpdateTime
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, StoreList entity, int offset) {
        entity.setBarCode(cursor.getLong(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setWarnNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUpdateTime(cursor.getLong(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(StoreList entity, long rowId) {
        entity.setBarCode(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(StoreList entity) {
        if (entity != null) {
            return entity.getBarCode();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
