package com.niucong.scsystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DrugInfo.
*/
public class DrugInfoDao extends AbstractDao<DrugInfo, Long> {

    public static final String TABLENAME = "DrugInfo";

    /**
     * Properties of entity DrugInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BarCode = new Property(0, long.class, "BarCode", true, "BAR_CODE");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Factory = new Property(2, String.class, "Factory", false, "FACTORY");
        public final static Property NamePY = new Property(3, String.class, "NamePY", false, "NAME_PY");
        public final static Property NamePYF = new Property(4, String.class, "NamePYF", false, "NAME_PYF");
    };


    public DrugInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DrugInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DrugInfo' (" + //
                "'BAR_CODE' INTEGER PRIMARY KEY NOT NULL ," + // 0: BarCode
                "'NAME' TEXT NOT NULL ," + // 1: Name
                "'FACTORY' TEXT," + // 2: Factory
                "'NAME_PY' TEXT NOT NULL ," + // 3: NamePY
                "'NAME_PYF' TEXT NOT NULL );"); // 4: NamePYF
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DrugInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DrugInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBarCode());
        stmt.bindString(2, entity.getName());
 
        String Factory = entity.getFactory();
        if (Factory != null) {
            stmt.bindString(3, Factory);
        }
        stmt.bindString(4, entity.getNamePY());
        stmt.bindString(5, entity.getNamePYF());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DrugInfo readEntity(Cursor cursor, int offset) {
        DrugInfo entity = new DrugInfo( //
            cursor.getLong(offset + 0), // BarCode
            cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Factory
            cursor.getString(offset + 3), // NamePY
            cursor.getString(offset + 4) // NamePYF
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DrugInfo entity, int offset) {
        entity.setBarCode(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setFactory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNamePY(cursor.getString(offset + 3));
        entity.setNamePYF(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DrugInfo entity, long rowId) {
        entity.setBarCode(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DrugInfo entity) {
        if(entity != null) {
            return entity.getBarCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
